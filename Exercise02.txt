Exercise 2

1.The code in this example contains two functions, func1 and func2, which implement the QuickSort algorithm on an array. The Python interpreter's recursion limit is increased to 20000 using sys.setrecursionlimit(20000) to ensure that the recursive functions can be called multiple times. func1 takes three parameters-the array, a lower index, and an upper index-and if the lower index is smaller than the upper, it calls func2 to find a pivot index that splits the list into two. It then recursively calls func1 on the two sublists. func2 also takes three parameters-the array, a start index and an end index-and sets the pivot value to the first element of the sublist. It has two pointers, low and high, which move towards each other and switch around any elements that are on the wrong side.The arrows point toward one another, exchanging elements that are on the wrong side of the point of reference, until they arrive at the last position of the pivot. Then, the procedure switches the pivot with the element at the highest point and produces the index of the pivot.

To put it simply, the code carries out the QuickSort algorithm, which is a divide-and-conquer tactic that orders an array by picking a pivot and breaking down the elements into two separate lists again and again, and then sorting the subsets systematically. The time complexity of QuickSort is usually O(nlogn) but can reach O(n^2) in the worst case.

2.
